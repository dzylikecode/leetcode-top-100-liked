class Solution {
  /**
   *  |>     
   * [,2,0,1,0,3,12]
   *    |>
   * [,2,0,1,0,3,12]
   *    | |>
   * [,2,0,1,0,3,12]
   *      | |>
   * [,2,1,0,0,3,12]
   *      |   |>
   * [,2,1,0,0,3,12]
   *        |   |>
   * [,2,1,3,0,0,12]
   *           |   |>
   * [,2,1,3,12,0,0]
   * 
   * 
   * - eat: 
   *      |     |>                |       |>
   * [...1,0,0,0,0,...]  --> [...1,0,0,0,0,...]
   * 
   * - move
   *      |     |>                   |     |>
   * [...1,0,0,0,2,3...]  --> [...1,2,0,0,0,3...]
   *        |
   *        |
   *        | 1. snake move
   *        V
   * 
   *        |     |>        2. draw                 |     |>
   * [...1,0,0,0,2,3...]  ------------>      [...1,2,0,0,0,3...]
   * 
   */
  void moveZeroes(List<int> nums) {
    (int, int) snake = (0, 0);

    for (final head in nums) {
      if (head == 0) {
        snake = (snake.$1, snake.$2 + 1); // eat zero
      } else {
        snake = (snake.$1 + 1, snake.$2 + 1); // 1. move
        nums[snake.$2 - 1] = nums[snake.$1 - 1]; // 2. draw
        nums[snake.$1 - 1] = head;
      }
    }
  }
}
